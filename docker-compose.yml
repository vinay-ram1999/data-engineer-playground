# version: "3.9"

x-airflow-common:
  &airflow-common
  image: apache/airflow:3.0.0
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USERNAME}:${DB_PASSWORD}@postgres/${DB_NAME}
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: ${AIRFLOW_API_SERVER_URL}
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
  networks:
    - lakehouse-network

services:
  # Minio Storage Server
  minio:
    image: minio/minio@sha256:8834ae47a2de3509b83e0e70da9369c24bbbc22de42f2a2eddc530eee88acd1b
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_USER_USERNAME}
      - MINIO_ROOT_PASSWORD=${MINIO_USER_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./data:/seed
      - ./minio:/data
    entrypoint: >
      /bin/sh -c "
      minio server /data --console-address ':9001' &
      sleep 5;
      mc alias set myminio http://localhost:9000 ${MINIO_USER_USERNAME} ${MINIO_USER_PASSWORD};
      mc admin accesskey create myminio/ --access-key ${AWS_ACCESS_KEY_ID} --secret-key ${AWS_SECRET_ACCESS_KEY} --description 'Access key for docker environment';
      mc mb myminio/seed;
      mc cp /seed/* myminio/seed/;
      mc mb myminio/${NESSIE_BUCKET};
      mc mb myminio/${UNITY_BUCKET};
      tail -f /dev/null"
    networks:
      - lakehouse-network
  
  # Postgres DB for nessie backend
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: |
        pg_isready -U ${DB_USERNAME} -d ${DB_NAME}
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - lakehouse-network
    
  # PG Admin
  pgadmin:
    image: dpage/pgadmin4:9.3
    container_name: pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "80"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 45s
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: secret123
    volumes:
      - pgadata:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - lakehouse-network

  # Nessie Catalog with Postgres DB as backend
  nessie:
    image: ghcr.io/projectnessie/nessie:0.83.1
    container_name: nessie
    ports:
      - "19120:19120"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - QUARKUS_PROFILE=prod
      - QUARKUS_HTTP_PORT=19120
      - NESSIE_VERSION_STORE_TYPE=JDBC
      - QUARKUS_DATASOURCE_JDBC_URL=${DB_JDBC_URI}
      - QUARKUS_DATASOURCE_USERNAME=${DB_USERNAME}
      - QUARKUS_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - QUARKUS_LOG_LEVEL=INFO
    networks:
      - lakehouse-network
  
  # Unity Catalog
  unity:
    platform: linux/x86_64
    image: unitycatalog/unitycatalog:v0.2.1
    container_name: unity   # This container name is used in unity-ui image build!
    user: root
    env_file:
      - .env
    ports:
      - "8085:8080"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./unity/conf:/home/unitycatalog/etc/conf
      - udata:/home/unitycatalog/etc/data/external
      - udb:/home/unitycatalog/etc/db
    # This workaround is required to use the 'bin/uc read' command to read the contents from default unity delta tables 
    entrypoint: > 
      /bin/bash -c "
      apk add --no-cache ca-certificates wget && \
      wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \
      wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r1/glibc-2.35-r1.apk && \
      wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r1/glibc-bin-2.35-r1.apk && \
      apk add --no-cache --allow-untrusted --force-overwrite glibc-2.35-r1.apk glibc-bin-2.35-r1.apk && \
      rm -f glibc-2.35-r1.apk glibc-bin-2.35-r1.apk && \
      bin/start-uc-server
      "
    networks:
      - lakehouse-network
  
  # unity-setup:
  #   image: unitycatalog/unitycatalog:v0.2.1
  #   container_name: unity-setup
  #   depends_on:
  #     unity:
  #       condition: service_healthy
  #   command: >
  #     /bin/bash -c "
  #     sleep 5;
  #     echo 'Running Unity Catalog setup...';
  #     bin/uc catalog create --name ${NESSIE_BUCKET} --server ${UNITY_SERVER} || true;
  #     bin/uc catalog create --name ${UNITY_BUCKET} --server ${UNITY_SERVER} || true;
  #     echo 'Catalog creation complete.';
  #     "
  #   networks:
  #     - lakehouse-network
  
  # Unity UI
  unity-ui:
    # build:
    #   context: ./unity/ui/
    #   dockerfile: Dockerfile
    #   # args:
    #   #   PROXY_HOST: ${UNITY_HOST}
    image: vinayramg/unitycatalog-ui_v0.2.1:latest
    container_name: unity-ui
    depends_on:
      unity:
        condition: service_healthy
      # unity-setup:
      #   condition: service_completed_successfully
    ports:
      - "3000:3000"
    networks:
      - lakehouse-network
  
  # Spark 3.5.5 engine with jupyter notebook
  spark:
    # build:
    #   context: ./spark/
    #   dockerfile: Dockerfile
    image: vinayramg/spark-nb_v3.5.5:latest
    container_name: spark
    mem_limit: 8g
    depends_on:
      - nessie
      - unity-ui
      - minio
    env_file:
      - .env
    ports:
      - "8082:8080"             # Master Web UI (exposed to 8082 instead of 8080)
      - "7077:7077"             # Master Port for job submissions
      - "18080:18080"           # Spark History Server
      - "8888:8888"             # Jupyter Notebook
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SPARK_MASTER_HOST=spark
      - SPARK_HISTORY_OPTS=-Dspark.history.fs.logDirectory=/tmp/spark-events
      - PYTHONPATH=/opt/bitnami/workspace/seed
    volumes:
      - ./spark/seed:/opt/bitnami/workspace/seed
    entrypoint: >
      /bin/bash -c "
      /opt/bitnami/spark/sbin/start-master.sh && \
      mkdir -p /tmp/spark-events && \
      /opt/bitnami/spark/sbin/start-history-server.sh && \
      jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password='' && \
      tail -f /dev/null
      "
    networks:
      - lakehouse-network
  
  # Trino engine
  trino:
    image: "trinodb/trino:475"
    container_name: trino
    mem_limit: 8g
    depends_on:
      - nessie
      - unity-ui
      - minio
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - ./trino/etc:/etc/trino
      # - ./trino/keystore.jks:/usr/lib/trino/keystore.jks
      # - ./trino/catalog:/etc/trino/catalog
    #   - ./trino/init-trino.sh:/docker-entrypoint.d/init-trino.sh:ro
    # environment:
    #   KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
    networks:
      - lakehouse-network
    
  airflow-apiserver:
    <<: *airflow-common
    container_name: airflow-apiserver
    command: api-server
    ports:
      - "8088:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    container_name: airflow-dag-processor
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /opts/airflow/{logs,dags,plugins,config}
        chown -R "${AIRFLOW_UID}:0" /opts/airflow/{logs,dags,plugins,config}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_USER_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    # depends_on:
      # <<: *airflow-common-depends-on

networks:
  lakehouse-network:
    driver: bridge

volumes:
  pgdata:
  pgadata:
  udata:
  udb:
